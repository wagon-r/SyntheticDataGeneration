# -*- coding: utf-8 -*-
"""ctgan versuch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G5bLXd55_NJTf-Pp2zcqrlcIoWQudqis

This was the first attempt with ctgan, where aggregated values were used for the time series data. 
The model was trained for 500 epochs and the synthetic data was generated with 10000 samples. The synthetic data was saved as a parquet file. 
"""

import pandas as pd
import numpy as np
from sklearn import cluster

from ydata_synthetic.synthesizers import ModelParameters, TrainParameters
from ydata_synthetic.synthesizers.regular import RegularSynthesizer

# List to store individual dataframes
data_subgroups = []

# Loop through the Parquet files and read them into dataframes
for group_index in range(12):
    file_path = f"/content/group_{group_index}.parquet"
    df = pd.read_parquet(file_path)
    data_subgroups.append(df)

# Concatenate the dataframes into a single dataframe
data = pd.concat(data_subgroups, ignore_index=True)
data

# @title cmdoorfriction vs cmelectronicage

from matplotlib import pyplot as plt
data.plot(kind='scatter', x='cmdoorfriction', y='cmelectronicage', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

#Data processing and analysis
num_cols = list(data.columns)

print('Dataset columns: {}'.format(num_cols))
sorted_cols = ['cmcouplerfriction',
 'cmdoorfriction',
 'cmelectronicage',
 'cmvibration',
 'doorcyclecounter',
 'mean_doorforce',
 'median_doorforce',
 'min_doorforce',
 'max_doorforce',
 'mean_doorspeed',
 'median_doorspeed',
 'min_doorspeed',
 'max_doorspeed',
 'mean_doorposition',
 'median_doorposition',
 'min_doorposition',
 'max_doorposition']
processed_data = data[ sorted_cols ].copy()
train_data = processed_data.copy()

"""GAN Training"""

# Defining the training parameters
batch_size = 500
epochs = 500+1
learning_rate = 2e-4
beta_1 = 0.5
beta_2 = 0.9

ctgan_args = ModelParameters(batch_size=batch_size,
                             lr=learning_rate,
                             betas=(beta_1, beta_2))

train_args = TrainParameters(epochs=epochs)

synth = RegularSynthesizer(modelname='ctgan', model_parameters=ctgan_args)
synth.fit(data=data, train_arguments=train_args, num_cols=num_cols, cat_cols=[])

synth_data = synth.sample(10000)
synth_data.to_parquet('ctgan_versuch_1')